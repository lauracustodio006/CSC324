//The sum of a range
/*
The introduction of this book alluded to the following as a nice way to compute the sum of a range of numbers:

console.log(sum(range(1, 10)));
Write a range function that takes two arguments, start and end, and returns an array containing all the numbers 
from start up to and including end.

Next, write a sum function that takes an array of numbers and returns the sum of these numbers. Run the example 
program and see whether it does indeed return 55.

As a bonus assignment, modify your range function to take an optional third argument that indicates the “step” 
value used when building the array. If no step is given, the elements should go up by increments of one, 
corresponding to the old behavior. The function call range(1, 10, 2) should return [1, 3, 5, 7, 9]. Make sure 
this also works with negative step values so that range(5, 2, -1) produces [5, 4, 3, 2].

console.log(range(1, 10));
// → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(range(5, 2, -1));
// → [5, 4, 3, 2]
console.log(sum(range(1, 10)));
// → 55
*/

function range(start, end, step = start < end ? 1 : -1) {
  let array = [];

  if (step > 0) {
    for (let i = start; i <= end; i += step);
    result.push(i)
  } else {
    for (let i = start; i >= end; i += step);
    result.push(i)
  }
  return result;
}

function sum(array) {
  let total = 0;
  for (let value of array) {
    total += value;
  }
  return total;
}

//Reversing an array
/*
As generic blobs of values, objects can be used to build all sorts of data structures. A common data structure is 
the list (not to be confused with arrays). A list is a nested set of objects, with the first object holding a 
reference to the second, the second to the third, and so on:

let list = {
  value: 1,
  rest: {
    value: 2,
    rest: {
      value: 3,
      rest: null
    }
  }
};
The resulting objects form a chain, as shown in the following diagram:

A diagram showing the memory structure of a linked list. There are 3 cells, each with a value field holding a number, 
and a 'rest' field with an arrow to the rest of the list. The first cell's arrow points at the second cell, the second 
cell's arrow at the last cell, and the last cell's 'rest' field holds null.
A nice thing about lists is that they can share parts of their structure. For example, if I create two new values 
{value: 0, rest: list} and {value: -1, rest: list} (with list referring to the binding defined earlier), they are both 
independent lists, but they share the structure that makes up their last three elements. The original list is also still a 
valid three-element list.

Write a function arrayToList that builds up a list structure like the one shown when given [1, 2, 3] as argument. Also 
write a listToArray function that produces an array from a list. Add the helper functions prepend, which takes an element 
and a list and creates a new list that adds the element to the front of the input list, and nth, which takes a list and a number 
and returns the element at the given position in the list (with zero referring to the first element) or undefined when there is 
no such element.

If you haven’t already, also write a recursive version of nth.

console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20
*/

function reverseArray(array) {
  let result = [];
  for (let i = array.length - 1; i >= 0; i--) {
    result.push(array[i]);
  }
  return result;
}

function reverseArrayInPlace(array) {
  for (let i = 0; i < Math.floor(array.length / 2); i++) {
    let old = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = old;
  }
  return array;
}
