// Chapter 2

// EXPRESSION AND STATEMENTS
/*
 - a fragments of code that produces value = expression
 - JavaScript statement = full sentence
 - side effects = changes in the machine that affect the statement after
*/
// Bindings
/*
 - binding is more like grasping values
  - two binding can refer to the same value
  - a program can only access the values that is refered
let binding_name = expression
- keywords:
 - let, var (varible) = indicates the sentence is going to be a binding
 - const (constant) = defines constant binding 
*/
let ten = 10;
console.log(ten * ten);
/* 100
 - the = operator can be used on existing bidings to disconnect them 
 from their current value
 */
ten = 5 
console.log(ten * ten)
// 25
// BINDING NAMES
/*
- sequence of one or more letters
- name can't start with a digit
- it can iclude $ or _ but no other punctuation or special character
- keywords and reserved words are not used:
  -break case catch class const continue debugger default
   delete do else enum export extends false finally for
   function if implements import interface in instanceof let
   new package private protected public return static super
   switch this throw true try typeof var void while with yield
*/
// ENVIRONMENT
/*
- collection of bindings and their values that exist at a given time
- the environment is not empty
*/
// FUNCTIONS
/*
- piece of program wrapped in a value
- values given to functions are called arguments
- values can be applied in order to run the wrapped program
- executing a function is called invoking, calling, or applying
*/
// CONSOLE.LOG FUNCTIONS
/*
- console.log - used to output values
- expression that retrieves the log property from the value held by 
 the console binding. 
*/
// RETURN VALUES  
/*
- function produces a value, it is said to return that value
- anything that produces a value is an expression in JavaScript
*/
// CONTROL FLOW
/*
- statements are executed from top to bottom
*/
let theNumber = Number(prompt("Pick a number"));
console.log("Your number is the square root of " +
            theNumber * theNumber);
/* 
- function Number converts a value to a number
- prompt is a string value and uses the number from the Number function
*/
// CONDITIONAL EXECUTION
/*
- branching road where the program takes the proper branch based on the 
 situation at hand
- uses the if keyword
-  if = executes or skips a statement depending on the value of a Boolean
expression
- if ({ block })
- else- creates another alternative to the if statement
*/
// WHILE AND DO LOOPS 
/*
- loop control flow = way to run  a piece of code multiple times
  - allows us to go back to some point in the program before and repeat 
    it 
- while is followed by an expression in paratheses and then a statement
- do loop always executes its body at least once, and it starts testing
  whether it should stop only after that fist execution
*/
// FOR LOOPS
/*
- for (initialized th loop, checks whether the loop must continue, 
       update the state of the loop after every iteration)
*/
let number = 0;
while (number <= 12) {
  console.log(number);
  number = number + 2;
}
----
for (let number = 0; number <= 12; number = number + 2) {
  console.log(number);
}
// BREAKING OUT OF A LOOP 
/*
- break statement immediatly jumps outs of the enclosing loop
- infinate loop is when the code gets stuck and never finishes running
- continue controls jumps out of the body and continues with the loop next interaction
*/
// UPDATING BINDING SUCCINCITLY







